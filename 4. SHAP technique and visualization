------------------------------------------
# RF+SMOTE

import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_predict, StratifiedKFold, train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_curve, auc, roc_auc_score
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import shap

# Load the training dataset
train_file = "training_set.csv"
train_data = pd.read_csv(train_file)

# Define input features (X) and target (y)
X = train_data[['grade', 'age', 'gender', 'vision', 'ser']]
y = train_data['occur']

# Load the external validation dataset
external_file = "external_test.csv"
external_data = pd.read_csv(external_file)
X_test = external_data[['grade', 'age', 'gender', 'vision', 'ser']]
y_test = external_data['occur']

# Random Forest Classifier setup
rf = RandomForestClassifier(
    n_estimators=320,
    max_depth=13,
    min_samples_split=10,
    min_samples_leaf=4,
    max_features='sqrt',
    random_state=66,
    n_jobs=-1
)

# Resampling with SMOTE
smote = SMOTE(k_neighbors=5, random_state=66)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Fit the Random Forest model with SMOTE data
rf.fit(X_resampled, y_resampled)

# SHAP explanation
explainer = shap.Explainer(rf, X_resampled)
shap_values = explainer(X_resampled)

# SHAP Summary Plot
shap.summary_plot(shap_values, X_resampled, plot_type="dot")

# SHAP Heatmap Plot
shap_interaction_values = explainer.shap_interaction_values(X_resampled)
shap.plots.heatmap(shap_interaction_values, max_display=5)

# SHAP Compact Dot Summary Plot
shap.summary_plot(shap_interaction_values, X_resampled, max_display=10, plot_type="compact_dot")

# SHAP Dependence Plots for all variable combinations
for feature in X_resampled.columns:
    for other_feature in X_resampled.columns:
        if feature != other_feature:
            shap.dependence_plot((feature, other_feature), shap_interaction_values, X_resampled)

# Print a completion message
print("SHAP analysis completed for RF + SMOTE, and visualizations are exported.")

------------------------------------------
# XGB+ADASYN

import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_predict, StratifiedKFold, train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import roc_curve, auc, roc_auc_score
from imblearn.over_sampling import ADASYN, SMOTE, RandomOverSampler
import matplotlib.pyplot as plt
import shap

# Load the training dataset
train_file = "training_set.csv"
train_data = pd.read_csv(train_file)

# Define input features (X) and target (y)
X = train_data[['grade', 'age', 'gender', 'vision', 'ser']]
y = train_data['prog']

# Load the external validation dataset
external_file = "external_test.csv"
external_data = pd.read_csv(external_file)
X_test = external_data[['grade', 'age', 'gender', 'vision', 'ser']]
y_test = external_data['prog']

# XGBoost Classifier setup
xgb = XGBClassifier(
    n_estimators=440,
    max_depth=6,
    learning_rate=0.06,
    subsample=0.8,
    colsample_bytree=0.9,
    gamma=0.2,
    min_child_weight=5,
    random_state=66,
    eval_metric='logloss',
    n_jobs=-1
)

# Resampling with ADASYN
adasyn = ADASYN(n_neighbors=5, random_state=66)
X_resampled, y_resampled = adasyn.fit_resample(X, y)

# Fit the XGBoost model with ADASYN data
xgb.fit(X_resampled, y_resampled)

# SHAP explanation
explainer = shap.Explainer(xgb, X_resampled)
shap_values = explainer(X_resampled)

# SHAP Summary Plot
shap.summary_plot(shap_values, X_resampled, plot_type="dot")

# SHAP Heatmap Plot
shap_interaction_values = explainer.shap_interaction_values(X_resampled)
shap.plots.heatmap(shap_interaction_values, max_display=5)

# SHAP Compact Dot Summary Plot
shap.summary_plot(shap_interaction_values, X_resampled, max_display=10, plot_type="compact_dot")

# SHAP Dependence Plots for all variable combinations
for feature in X_resampled.columns:
    for other_feature in X_resampled.columns:
        if feature != other_feature:
            shap.dependence_plot((feature, other_feature), shap_interaction_values, X_resampled)

# Print a completion message
print("SHAP analysis completed, and visualizations are exported.")
