import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_predict, StratifiedKFold, train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import roc_curve, auc, roc_auc_score
from imblearn.over_sampling import ADASYN, SMOTE, RandomOverSampler
import matplotlib.pyplot as plt

# Load the training dataset
train_file = "training_set.csv"
train_data = pd.read_csv(train_file)

# Define input features (X) and target (y)
X = train_data[['grade', 'age', 'gender', 'vision', 'ser']]
y = train_data['prog']

# Load the external validation dataset
external_file = "external_test.csv"
external_data = pd.read_csv(external_file)
X_test = external_data[['grade', 'age', 'gender', 'vision', 'ser']]
y_test = external_data['prog']

# XGBoost Classifier setup
xgb = XGBClassifier(
    n_estimators=440,
    max_depth=6,
    learning_rate=0.06,
    subsample=0.8,
    colsample_bytree=0.9,
    gamma=0.2,
    min_child_weight=5,
    random_state=66,
    eval_metric='logloss',
    n_jobs=-1
)

# Resampling techniques with specific parameters
resampling_methods = {
    'XGB': None,
    'XGB + ADASYN': ADASYN(n_neighbors=5, random_state=66),
    'XGB + SMOTE': SMOTE(k_neighbors=5, random_state=66),
    'XGB + ROS': RandomOverSampler(random_state=66)
}

# Function to train and evaluate XGBoost with different resampling techniques
def evaluate_resampling(xgb, resampling_method, X, y, X_test, y_test, label):
    if resampling_method:
        X_resampled, y_resampled = resampling_method.fit_resample(X, y)
    else:
        X_resampled, y_resampled = X, y

    xgb.fit(X_resampled, y_resampled)
    y_pred_proba = xgb.predict_proba(X_test)[:, 1]
    auc_score = roc_auc_score(y_test, y_pred_proba)
    fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
    return fpr, tpr, auc_score

# Plot ROC Curves
plt.figure(figsize=(5, 5))
colors = ['black', 'darkred', 'lightcoral', '#FFB6C1']
roc_results = {}

for (label, resampler), color in zip(resampling_methods.items(), colors):
    fpr, tpr, auc_score = evaluate_resampling(xgb, resampler, X, y, X_test, y_test, label)
    plt.plot(fpr, tpr, label=f'{label} (AUC = {auc_score:.3f})', color=color)
    roc_results[label] = auc_score

# Plot settings
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.title('ROC Curves for XGB with Resampling Techniques')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc='lower right')
plt.show()

# Print AUC results
print("AUC Results:")
for label, auc_score in roc_results.items():
    print(f"{label}: {auc_score:.3f}")

